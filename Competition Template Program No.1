#include "robot-config.h"

vex::competition Competition;

//Varibles
int isForward;
int liftLevel;

// Functions
    // Move lift to level 0
    int moveToLevel0() {
        RightLift.startRotateTo(00,rotationUnits::deg,75,velocityUnits::pct);
        LeftLift.startRotateTo(00,rotationUnits::deg,75,velocityUnits::pct);
        liftLevel = 0;
        return 0;
    }
    // Move lift to level 1
    int moveToLevel1() {
        RightLift.startRotateTo(200,rotationUnits::deg, 75,velocityUnits::pct);
        LeftLift.startRotateTo(200,rotationUnits::deg, 75,velocityUnits::pct);
        liftLevel = 1;
        return 0;
    }
    // Move lift to level 2
    int moveToLevel2() {
        RightLift.startRotateTo(215,rotationUnits::deg, 75,velocityUnits::pct);
        LeftLift.startRotateTo(215,rotationUnits::deg, 75,velocityUnits::pct);
        liftLevel = 2;
        return 0;
    }

    // Move lift to level 3
    int moveToLevel3() {
        RightLift.startRotateTo(423,rotationUnits::deg, 75,velocityUnits::pct);
        LeftLift.startRotateTo(423,rotationUnits::deg, 75,velocityUnits::pct);
        liftLevel = 3;
        return 0;
    }

    // Move lift to level 4
    int moveToLevel4() {
        RightLift.startRotateTo(790,rotationUnits::deg, 75,velocityUnits::pct);
        LeftLift.startRotateTo(790,rotationUnits::deg, 75,velocityUnits::pct);
        liftLevel = 4;
        return 0;
    }

    //Move lift to given level
/*    int moveToLevel(int level) {
        if (level == 0) {
            moveToLevel0();
        }
        else if (level == 1) {
            moveToLevel1();
        }
        else if (level == 2) {
            moveToLevel2();
        }
        else if (level == 3) {
            moveToLevel3();
        }
        else if (level == 4) {
            moveToLevel4();
        }        
    } //end moveToLevel
*/
//Pre-autonomous
void pre_auton( void ) {
    isForward = true;
    liftLevel = 0;
}

//Autonomous
void autonomous( void ) {
    
}

//Driver Control
void usercontrol( void ) {
    
  while (true){
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Drive ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Changes from forward to backwards and backwards to forwards
    if (Controller1.ButtonDown.pressing() && isForward)
        isForward = false; 
    else if (Controller1.ButtonDown.pressing() && isForward == false)
        isForward = true;
    
    //If the robot is going forward
    if (isForward) {
        if (Controller1.Axis2.value() <= 5 && Controller1.Axis2.value() >= -5) 
            RightDrive.stop(brakeType::hold);
        else
            RightDrive.spin(directionType::fwd, Controller1.Axis2.position(percentUnits::pct), velocityUnits::pct);
      
        if (Controller1.Axis3.value() <= 5 && Controller1.Axis3.value() >= -5)
            LeftDrive.stop(brakeType::hold);
        else
            LeftDrive.spin( directionType::fwd, Controller1.Axis3.position(percentUnits::pct), velocityUnits::pct);
    
    //if the robot is going backward
    } else {
        if (Controller1.Axis3.value() <= 5 && Controller1.Axis3.value() >= -5)   
            RightDrive.stop(brakeType::hold);
        else
            RightDrive.spin(directionType::rev, Controller1.Axis3.position(percentUnits::pct), velocityUnits::pct);
      
        if (Controller1.Axis2.value() <= 5 && Controller1.Axis2.value() >= -5)
            LeftDrive.stop(brakeType::hold);
        else
            LeftDrive.spin( directionType::rev, Controller1.Axis2.position(percentUnits::pct), velocityUnits::pct);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Lift ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Lift lift up
    if (Controller1.ButtonR1.pressing()) {
        RightLift.spin(directionType::fwd, 90, velocityUnits::pct);
        LeftLift.spin(directionType::fwd, 90, velocityUnits::pct);
    
    //Lower lift down
    } else if (Controller1.ButtonR2.pressing()) {             
        RightLift.spin(directionType::rev, 90, velocityUnits::pct);       
        LeftLift.spin(directionType::rev, 90, velocityUnits::pct);
    
    //Brake lift
    } else {
        RightLift.stop(brakeType::hold);
        LeftLift.stop(brakeType::hold);
        
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Button lift /////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //X - All the way up
    if(Controller1.ButtonX.pressing()) {
        moveToLevel4();
    }  
    //Y - Down one
    if (liftLevel == 0){  
    } else if (liftLevel == 1){
        moveToLevel0();
    } else if (liftLevel == 2){
        moveToLevel1();
    } else if (liftLevel == 3){
        moveToLevel2();
    } else if (liftLevel == 4){
        moveToLevel3();
    }
        
    //A - Up one
    if (liftLevel == 0) {
        moveToLevel1();
    } else if (liftLevel == 1) {
        moveToLevel2();
    } else if (liftLevel == 2) {
        moveToLevel3();
    } else if (liftLevel == 3) {
        moveToLevel4();
    } else if (liftLevel == 4) { 
    }
    //B - All the way down
    if(Controller1.ButtonB.pressing()) {
        moveToLevel0();
    }  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Cap Flipper /////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
    //Get the caps rotation
    int CapsRotation = CapFlipper.rotation(rotationUnits::deg);  
    
    //Make sure that it does not go over 1080 or under 0
    if (CapsRotation >= 1080)
        CapFlipper.setRotation(CapsRotation -1080, rotationUnits::deg);
    if (CapsRotation <= 0)
        CapFlipper.setRotation(CapsRotation +1080, rotationUnits::deg);
      
    //Rotate 180 degrees
    if (Controller1.ButtonUp.pressing() && (CapsRotation >= 270 && CapsRotation <= 610))
        CapFlipper.startRotateTo(00,rotationUnits::deg,75,velocityUnits::pct);
    else if (Controller1.ButtonUp.pressing() && (CapsRotation <= 270 || CapsRotation >= 610))
        CapFlipper.startRotateTo(540,rotationUnits::deg,75,velocityUnits::pct);
      
    // Rotate cap fipper
    else if (Controller1.ButtonL1.pressing())
        CapFlipper.spin(directionType::fwd, 75, velocityUnits::pct);
    else if (Controller1.ButtonL2.pressing())
        CapFlipper.spin(directionType::rev, 75, velocityUnits::pct);
    
    // Brake cap flipper
    else
        CapFlipper.stop(brakeType::hold);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
  }
}

// Main - don't change
int main() {
    pre_auton();
    
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );
                      
    while(1) {
        vex::task::sleep(100); //Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
