#include "robot-config.h"

vex::competition Competition;
int isForward;

void pre_auton( void ) {
  isForward = true;
    
}

void autonomous( void ) {
    
}

void usercontrol( void ) {
    
  while (1){
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Drive ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////     
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (Controller1.ButtonDown.pressing() && isForward)
      isForward = false;  
    else if (Controller1.ButtonDown.pressing() && isForward == false)
      isForward = true;

    if (isForward) {
      if (Controller1.Axis2.value() <= 5 && Controller1.Axis2.value() >= -5) 
        RightDrive.stop(brakeType::hold);
      else
        RightDrive.spin(directionType::fwd, Controller1.Axis2.position(percentUnits::pct), velocityUnits::pct);
      
      if (Controller1.Axis3.value() <= 5 && Controller1.Axis3.value() >= -5)
        LeftDrive.stop(brakeType::hold);
      else
        LeftDrive.spin( directionType::fwd, Controller1.Axis3.position(percentUnits::pct), velocityUnits::pct);
      
    } else {
      if (Controller1.Axis3.value() <= 5 && Controller1.Axis3.value() >= -5)   
        RightDrive.stop(brakeType::hold);
      else
        RightDrive.spin(directionType::rev, Controller1.Axis3.position(percentUnits::pct), velocityUnits::pct);
      
      if (Controller1.Axis2.value() <= 5 && Controller1.Axis2.value() >= -5)
        LeftDrive.stop(brakeType::hold);
      else
        LeftDrive.spin( directionType::rev, Controller1.Axis2.position(percentUnits::pct), velocityUnits::pct);
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Lift ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (Controller1.ButtonR1.pressing()) {
      RightLift.spin(directionType::fwd, 90, velocityUnits::pct);
      LeftLift.spin(directionType::fwd, 90, velocityUnits::pct);
        
    } else if (Controller1.ButtonR2.pressing()) {             
      RightLift.spin(directionType::rev, 90, velocityUnits::pct);       
      LeftLift.spin(directionType::rev, 90, velocityUnits::pct);
        
    } else {
      RightLift.stop(brakeType::hold);
      LeftLift.stop(brakeType::hold);
        
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Cap Flipper /////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
    int CapsRotation = CapFlipper.rotation(rotationUnits::deg);  
    if (CapsRotation >= 1080)
      CapFlipper.setRotation(CapsRotation -1080, rotationUnits::deg);
    if (CapsRotation <= 0)
      CapFlipper.setRotation(CapsRotation +1080, rotationUnits::deg);
    if (Controller1.ButtonUp.pressing() && (CapsRotation >= 270 && CapsRotation <= 610))
      CapFlipper.rotateTo(00,rotationUnits::deg,75,velocityUnits::pct);
    else if (Controller1.ButtonUp.pressing() && (CapsRotation <= 270 || CapsRotation >= 610))
      CapFlipper.rotateTo(540,rotationUnits::deg,75,velocityUnits::pct);
    else if (Controller1.ButtonL1.pressing())
      CapFlipper.spin(directionType::fwd, 75, velocityUnits::pct);
    else if (Controller1.ButtonL2.pressing())
      CapFlipper.spin(directionType::rev, 75, velocityUnits::pct);
    else
      CapFlipper.stop(brakeType::hold);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
//// Lift //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
//    if (Controller1.ButtonX.pressed()) {
//      // Lift to this hight
//    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
  }
}

int main() {
  pre_auton();
    
  Competition.autonomous( autonomous );
  Competition.drivercontrol( usercontrol );
                      
  while(1) {
    vex::task::sleep(100); //Sleep the task for a short amount of time to prevent wasted resources.
  }    
       
}
