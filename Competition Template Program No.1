#include "robot-config.h"
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VCS VEX V5                   */
/*                                                                           */
/*---------------------------------------------------------------------------*/

//Creates a competition object that allows access to Competition methods.
vex::competition Competition;

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
int isForward;

void pre_auton( void ) {
  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  isForward = true;
  
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous( void ) {
  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................
    
}

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*                              User Control Task                             */
/*                                                                            */
/*  This task is used to control your robot during the user control phase of  */
/*  a VEX Competition.                                                        */
/*                                                                            */
/*  You must modify the code to add your own robot specific commands here.    */
/*----------------------------------------------------------------------------*/

void usercontrol( void ) {
  // User control code here, inside the loop
    
  while (1){
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo 
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to 
    // update your motors, etc.
          
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Drive ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
/**/    if (Controller1.ButtonDown.pressing() && isForward)                                                              ///
/**/        isForward = false;                                                                                           ///   
/**/    else if (Controller1.ButtonDown.pressing() && isForward == false)                                                ///
/**/        isForward = true;                                                                                            ///
/**/                                                                                                                     ///   
/**/    if (isForward) {                                                                                                 ///
/**/        if (Controller1.Axis2.value() <= 5 && Controller1.Axis2.value() >= -5) {                                     ///   
/**/            RightDrive.stop(brakeType::hold);                                                                        ///
/**/        } else {                                                                                                     ///
/**/            RightDrive.spin(directionType::fwd, Controller1.Axis2.position(percentUnits::pct), velocityUnits::pct);  ///
/**/        }                                                                                                            ///
/**/        if (Controller1.Axis3.value() <= 5 && Controller1.Axis3.value() >= -5) {                                     ///
/**/            LeftDrive.stop(brakeType::hold);                                                                         ///
/**/        } else {                                                                                                     ///
/**/            LeftDrive.spin( directionType::fwd, Controller1.Axis3.position(percentUnits::pct), velocityUnits::pct);  ///
/**/        }                                                                                                            ///
/**/    } else {                                                                                                         ///
/**/        if (Controller1.Axis3.value() <= 5 && Controller1.Axis3.value() >= -5) {                                     ///   
/**/            RightDrive.stop(brakeType::hold);                                                                        ///
/**/        } else {                                                                                                     ///
/**/            RightDrive.spin(directionType::rev, Controller1.Axis3.position(percentUnits::pct), velocityUnits::pct);  ///
/**/        }                                                                                                            ///
/**/        if (Controller1.Axis2.value() <= 5 && Controller1.Axis2.value() >= -5) {                                     ///
/**/            LeftDrive.stop(brakeType::hold);                                                                         ///
/**/        } else {                                                                                                     ///
/**/            LeftDrive.spin( directionType::rev, Controller1.Axis2.position(percentUnits::pct), velocityUnits::pct);  ///
/**/        }                                                                                                            ///
/**/    }                                                                                                                ///
/**/                                                                                                                     ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////         

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
// Lift ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
/**/                                                                                                                     ///
/**/    if (Controller1.ButtonR1.pressing()) {                                                                           ///
/**/        RightLift.spin(directionType::fwd, 90, velocityUnits::pct);                                                  ///
/**/        LeftLift.spin(directionType::fwd, 90, velocityUnits::pct);                                                   ///
/**/    } else if (Controller1.ButtonR2.pressing()) {                                                                    ///
/**/        RightLift.spin(directionType::rev, 90, velocityUnits::pct);                                                  ///
/**/        LeftLift.spin(directionType::rev, 90, velocityUnits::pct);                                                   ///
/**/    } else {                                                                                                         ///
/**/        RightLift.stop(brakeType::hold);                                                                             ///
/**/        LeftLift.stop(brakeType::hold);                                                                              ///
/**/    }                                                                                                                ///
/**/                                                                                                                     ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
//// Cap Flipper ///////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
/**/      int CapsRotation = CapFlipper.rotation(rotationUnits::deg);                                                    ///   
/**/      if (CapsRotation >= 1080)                                                                                      ///
/**/          CapFlipper.setRotation(CapsRotation -1080, rotationUnits::deg);                                            ///Brain.Screen.print("+");                                                                                                              ///
/**/                                                                                                                     ///   
/**/      if (CapsRotation <= 0)                                                                                         ///
/**/          CapFlipper.setRotation(CapsRotation +1080, rotationUnits::deg);                                            ///Brain.Screen.print("-");
/**/                                                                                                                     ///   
/**/      if (Controller1.ButtonUp.pressing() && (CapsRotation >= 270 && CapsRotation <= 610)) {                         ///
/**/          CapFlipper.rotateTo(00,rotationUnits::deg,75,velocityUnits::pct);                                          ///Brain.Screen.print("0");
/**/      } else if (Controller1.ButtonUp.pressing() && (CapsRotation <= 270 || CapsRotation >= 610)) {                  ///
/**/          CapFlipper.rotateTo(540,rotationUnits::deg,75,velocityUnits::pct);                                         ///Brain.Screen.print("1");
/**/      } else if (Controller1.ButtonL1.pressing()) {                                                                  ///
/**/          CapFlipper.spin(directionType::fwd, 75, velocityUnits::pct);                                               ///
/**/      } else if (Controller1.ButtonL2.pressing()) {                                                                  ///
/**/          CapFlipper.spin(directionType::rev, 75, velocityUnits::pct);                                               ///
/**/      } else {                                                                                                       ///
/**/          CapFlipper.stop(brakeType::hold);                                                                          ///
/**/      }                                                                                                              ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
//// Lift //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
/**///    if (Controller1.ButtonX.pressed()) {                                                                             ///                                   ///
/**///        // Lift lift to this hight                                                                                   ///
/**///    } else                                                                                                           ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
/**/                                                                                                                     ///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // ........................................................................
 
    vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
    
    //Run the pre-autonomous function. 
    pre_auton();
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
